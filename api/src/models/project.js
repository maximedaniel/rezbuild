/**
 * @module ProjectModel
 * @description Define a project with MongoDB schema
 */
import mongoose from 'mongoose'

const Schema = mongoose.Schema;

var ProjectSchema = new Schema({
    date: {type: Date, default: Date.now},
    name: {type: String, default: ""},
    country: {type: String, default: ""},
    city: {type: String, default: ""},
    address: {type: String, default: ""},
    context: {type: String, default: ""},
    degree: {type: String, default: 0},
    climat: {type: String, default: ""},
    refurbishmentExpectations: {type: String, default: ""},
    energyConsumptionExpectations: {type: String, default: 0},
    environmentalExpectations: {type: String, default: 0},
    economicalExpectations: {type: String, default: 0},
    socialExpectations: {type: String, default: 0},
    comfortExpectations: {type: String, default: 0},
    homeDuringRenovation: {type: Boolean, default: false},
    differentLocationDuringRenovation: {type: Boolean, default: false},
    differentLocationDuringRenovation: {type: Boolean, default: false},
    elevatorInstallation: {type: Boolean, default: false},
    improvedAccessibility: {type: Boolean, default: false},
    reductionBillAmount: {type: Boolean, default: false},
    moreHomeSpaces: {type: Boolean, default: false},
    brighterEnvironments: {type: Boolean, default: false},
    extraServiceRoom: {type: Boolean, default: false},
    heatingUpgrading: {type: Boolean, default: false},
    coolingUpgrading: {type: Boolean, default: false},
    ventilationUpgrading: {type: Boolean, default: false},
    consumptionControl: {type: Boolean, default: false},
    eliminitationAirInfiltration: {type: Boolean, default: false},
    shadingUpgrading: {type: Boolean, default: false},
    airQualityImprovement: {type: Boolean, default: false},
    noiseReduction: {type: Boolean, default: false},
    exposure: {type: String, default: ""},
    home: {type: String, default: ""},
    buildingTaxonomy: {type: String, default: ""},
    year: {type: String, default: 0},
    gradation: {type: String, default: ""},
    property: {type: String, default: ""},
    floors: {type: String, default: 0},
    interFloorHeight: {type: String, default: 0},
    floorNumber: {type: String, default: 0},
    apartmentByFloor: {type: String, default: 0},
    totalFloorsBuilding: {type: String, default: 0},
    footprintBuilding: {type: String, default: 0},
    totalUsefulSurface: {type: String, default: 0},
    linearDimensionN: {type: String, default: 0},
    linearDimensionNE: {type: String, default: 0},
    linearDimensionE: {type: String, default: 0},
    linearDimensionSE: {type: String, default: 0},
    linearDimensionS: {type: String, default: 0},
    linearDimensionSW: {type: String, default: 0},
    linearDimensionW: {type: String, default: 0},
    linearDimensionNW: {type: String, default: 0},
    floorAdjacent: {type: String, default: ""},
    ceilingAdjacent: {type: String, default: ""},
    wallAdjacent: {type: String, default: ""},
    windowsN: {type: String, default: 0},
    windowsNE: {type: String, default: 0},
    windowsE: {type: String, default: 0},
    windowsSE: {type: String, default: 0},
    windowsS: {type: String, default: 0},
    windowsSW: {type: String, default: 0},
    windowsW: {type: String, default: 0},
    windowsNW: {type: String, default: 0},
    windowsDoorN: {type: String, default: 0},
    windowsDoorNE: {type: String, default: 0},
    windowsDoorE: {type: String, default: 0},
    windowsDoorSE: {type: String, default: 0},
    windowsDoorS: {type: String, default: 0},
    windowsDoorSW: {type: String, default: 0},
    windowsDoorW: {type: String, default: 0},
    windowsDoorNW: {type: String, default: 0},
    typeGlass: {type: String, default: ""},
    typeFrame: {type: String, default: ""},
    rollerShutterBoxes: {type: Boolean, default: false},
    externalShields: {type: Boolean, default: false},
    presenceBalcony:{type: Boolean, default: false},
    owner: { type: Schema.Types.ObjectId, ref: 'User' },
    users: [{ type: Schema.Types.ObjectId, ref: 'User' }],
    usersToVerify: [{ type: Schema.Types.ObjectId, ref: 'User' }],
    revisions: [{ type: Schema.Types.ObjectId, ref: 'Revision' }]
});

var Project = mongoose.model('Project', ProjectSchema);
module.exports = Project;
